[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "nanogpt"
version = "0.0.0"
description = "A minimal GPT training repo (uv-integrated)"
readme = "README.md"
authors = [
  { name = "Andrej Karpathy" },
]
license = { file = "LICENSE" }
requires-python = ">=3.13"
dependencies = [
  "numpy>=2",
  "requests>=2.32",
  "tiktoken>=0.7",
  "tqdm>=4.66",
  "datasets>=2.20",
  "transformers>=4.44",
  "beautifulsoup4>=4.12",
  "torch>=2.4",
]

[project.optional-dependencies]
notebooks = [
  "matplotlib>=3.7",
  "pandas>=1.5",
  "jupyter>=1.0",
]


[tool.uv]
package = true
# Lockfile will be auto-generated by `uv lock` or `uv sync`

[tool.uv.sources]
# allow system-specific torch wheels to be resolved from PyPI

[tool.hatch.build.targets.wheel]
packages = ["_next"]

[dependency-groups]
# Mandatory dev tooling available in the project venv
# Sync with: uv sync --all-groups (required for development)
dev = [
  "pytest>=8",
  "ruff>=0.6",
  "mypy>=1.11",
  "pyright>=1.1.380",
]



[tool.ruff]
respect-gitignore = true
extend-exclude = [
  ".idea",
  ".vscode",
  "out",
  ".venv",
  "env",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
  ".git",
]

[tool.mypy]
# When invoked without explicit targets, analyze only the project code.
files = ["_next"]
# Also exclude common ignored/artifact directories if mypy is invoked without args.
exclude = '^(out/|\.idea/|\.vscode/|\.venv/|env/|\.pytest_cache/|\.mypy_cache/|\.ruff_cache/|\.git/)'


[tool.pytest.ini_options]
# Mirror previous pytest.ini settings
addopts = "-q"
testpaths = [
  "_next/tests",
]
norecursedirs = [
  ".git",
  ".idea",
  ".vscode",
  ".venv",
  "env",
  "out",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
]

[tool.pyright]
include = ["_next"]
exclude = [
  ".git",
  ".idea",
  ".vscode",
  "out",
  ".venv",
  ".mypy_cache",
  ".ruff_cache",
]
